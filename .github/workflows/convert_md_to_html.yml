name: Convert Markdown to HTML

on:
  push:
    branches:
      - "**"
      - "!docs"
    paths:
      - "**.md"

jobs:
  convert-markdown:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm init -y
          npm install markdown-it markdown-it-prism prismjs cross-env
          npm install shiki catppuccin-shiki

      - name: Create conversion script
        run: |
          cat > convert.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const markdownit = require('markdown-it');
          const prism = require('markdown-it-prism');
          const shiki = require('shiki');
          const { getTheme } = require('catppuccin-shiki');

          async function main() {
            // Get all changed markdown files
            const changedFiles = process.env.CHANGED_FILES.split(' ').filter(file => file.endsWith('.md'));
            
            // Initialize markdown-it with catppuccin theme
            const highlighter = await shiki.getHighlighter({
              theme: getTheme('mocha') // Catppuccin mocha theme
            });
            
            const md = markdownit({
              html: true,
              linkify: true,
              typographer: true,
              highlight: (code, lang) => {
                try {
                  return highlighter.codeToHtml(code, { lang });
                } catch (e) {
                  console.error(`Failed to highlight for language: ${lang}`);
                  return code;
                }
              }
            });
            
            // Create HTML template
            const htmlTemplate = (title, content) => `
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>${title}</title>
              <style>
                :root {
                  /* Catppuccin Mocha colors */
                  --base: #1e1e2e;
                  --surface0: #313244;
                  --surface1: #45475a;
                  --text: #cdd6f4;
                  --subtext1: #bac2de;
                  --blue: #89b4fa;
                  --lavender: #b4befe;
                  --pink: #f5c2e7;
                  --mauve: #cba6f7;
                  --red: #f38ba8;
                  --peach: #fab387;
                  --yellow: #f9e2af;
                  --green: #a6e3a1;
                }
                
                body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                  line-height: 1.6;
                  color: var(--text);
                  background-color: var(--base);
                  max-width: 900px;
                  margin: 0 auto;
                  padding: 2rem;
                }
                
                a {
                  color: var(--blue);
                  text-decoration: none;
                }
                
                a:hover {
                  text-decoration: underline;
                }
                
                h1, h2, h3, h4, h5, h6 {
                  color: var(--lavender);
                  margin-top: 2rem;
                }
                
                code {
                  font-family: 'Fira Code', monospace;
                  background-color: var(--surface0);
                  padding: 0.2em 0.4em;
                  border-radius: 3px;
                }
                
                pre {
                  background-color: var(--surface0);
                  padding: 1rem;
                  border-radius: 5px;
                  overflow-x: auto;
                }
                
                pre code {
                  background-color: transparent;
                  padding: 0;
                }
                
                blockquote {
                  border-left: 4px solid var(--mauve);
                  padding-left: 1rem;
                  color: var(--subtext1);
                  margin-left: 0;
                }
                
                table {
                  border-collapse: collapse;
                  width: 100%;
                }
                
                th, td {
                  border: 1px solid var(--surface1);
                  padding: 0.5rem;
                }
                
                th {
                  background-color: var(--surface0);
                }
                
                img {
                  max-width: 100%;
                  height: auto;
                }
                
                hr {
                  border: none;
                  border-top: 1px solid var(--surface1);
                  margin: 2rem 0;
                }
              </style>
            </head>
            <body>
              ${content}
            </body>
            </html>
            `;
            
            // Process each markdown file
            for (const mdFile of changedFiles) {
              try {
                const mdContent = fs.readFileSync(mdFile, 'utf8');
                const htmlContent = md.render(mdContent);
                
                // Create filename with path
                const dirname = path.dirname(mdFile);
                const basename = path.basename(mdFile, '.md');
                const htmlFile = path.join('html_output', dirname, `${basename}.html`);
                
                // Create directory if it doesn't exist
                fs.mkdirSync(path.dirname(htmlFile), { recursive: true });
                
                // Get title from first heading or use filename
                const titleMatch = mdContent.match(/^#\s+(.+)$/m);
                const title = titleMatch ? titleMatch[1] : basename;
                
                // Write HTML file
                fs.writeFileSync(htmlFile, htmlTemplate(title, htmlContent));
                console.log(`Converted ${mdFile} to ${htmlFile}`);
              } catch (error) {
                console.error(`Error processing ${mdFile}:`, error);
              }
            }
          }

          main().catch(console.error);
          EOL

      - name: Find changed markdown files
        id: changed-files
        run: |
          # Get all changed markdown files from feature branch
          CHANGED_FILES=$(git diff --name-only $(git merge-base origin/main HEAD) HEAD | grep '\.md$' || echo "")
          echo "Changed markdown files: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Convert markdown to HTML
        run: node convert.js

      - name: Checkout docs branch
        run: |
          # Save the HTML output temporarily
          mkdir -p ../html_output_tmp
          cp -r html_output/* ../html_output_tmp/ || true

          # Checkout docs branch
          git fetch origin docs || true
          if git rev-parse --verify origin/docs >/dev/null 2>&1; then
            git checkout docs
          else
            git checkout --orphan docs
            git rm -rf . || true
            echo "# Documentation" > README.md
            git add README.md
            git commit -m "Initialize docs branch"
          fi

          # Copy HTML files back
          mkdir -p .
          cp -r ../html_output_tmp/* . || true

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git add -A

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Get the current branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $BRANCH_NAME"

          git commit -m "Convert markdown to HTML from feature branch"

          # Set remote URL with token
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

          # Push to docs branch
          git push origin docs
