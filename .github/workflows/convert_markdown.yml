name: Convert Markdown to HTML

on:
  push:
    branches:
      - "**"
      - "!docs" # Exclude docs branch to avoid circular triggers
    paths:
      - "**/*.md" # Only trigger on markdown file changes

jobs:
  convert-markdown:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper branch handling

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: |
          npm init -y
          npm install markdown-it markdown-it-highlightjs highlight.js
          npm install markdown-it-anchor markdown-it-toc-done-right

      - name: Create conversion script
        run: |
          cat > convert.js << 'EOF'
          const fs = require('fs').promises;
          const path = require('path');
          const MarkdownIt = require('markdown-it');
          const highlightjs = require('markdown-it-highlightjs');
          const anchor = require('markdown-it-anchor');
          const toc = require('markdown-it-toc-done-right');

          // Initialize markdown parser with plugins
          const md = new MarkdownIt({
            html: true,
            linkify: true,
            typographer: true
          })
          .use(highlightjs, {
            auto: true,
            inline: true
          })
          .use(anchor, {
            permalink: anchor.permalink.ariaHidden({
              placement: 'after',
              class: 'anchor',
              symbol: '#',
              ariaHidden: true,
            }),
            level: [1, 2, 3, 4, 5, 6]
          })
          .use(toc, {
            level: [2, 3],
            listType: 'ul',
            listClass: 'toc-list',
            itemClass: 'toc-item',
            linkClass: 'toc-link'
          });

          // HTML template with GitHub-like styling
          const htmlTemplate = (content, title, tocContent) => `
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${title}</title>
            <style>
              :root {
                /* GitHub Light Variables */
                --color-canvas-default: #ffffff;
                --color-canvas-subtle: #f6f8fa;
                --color-border-default: #d0d7de;
                --color-border-muted: #d8dee4;
                --color-neutral-muted: rgba(175, 184, 193, 0.2);
                --color-accent-fg: #0969da;
                --color-accent-emphasis: #0969da;
                --color-danger-fg: #cf222e;
                --color-fg-default: #24292f;
                --color-fg-muted: #57606a;
                --color-fg-subtle: #6e7781;
                --color-success-fg: #1a7f37;
                --color-attention-fg: #9a6700;
                --color-header-bg: #24292f;
                --color-header-fg: #ffffff;
                --color-header-logo: #ffffff;
                --color-header-search-bg: #24292f;
                --color-header-search-border: #57606a;
                --color-code-block-bg: #f6f8fa;
                --color-code-block-border: #d0d7de;
              }
              
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif;
                line-height: 1.5;
                color: var(--color-fg-default);
                background-color: var(--color-canvas-default);
                max-width: 1012px;
                margin: 0 auto;
                padding: 32px;
                font-size: 16px;
              }
              
              /* Layout */
              .markdown-body {
                position: relative;
                margin-bottom: 16px;
                padding: 32px;
                border: 1px solid var(--color-border-default);
                border-radius: 6px;
                background-color: var(--color-canvas-default);
              }

              /* Table of Contents */
              .toc-container {
                margin-bottom: 32px;
                padding: 16px;
                background-color: var(--color-canvas-subtle);
                border: 1px solid var(--color-border-default);
                border-radius: 6px;
              }
              
              .toc-header {
                font-size: 16px;
                font-weight: 600;
                margin-top: 0;
                margin-bottom: 8px;
              }
              
              .toc-list {
                padding-left: 20px;
                margin-bottom: 0;
              }
              
              .toc-item {
                margin: 4px 0;
              }
              
              .toc-link {
                color: var(--color-accent-fg);
                text-decoration: none;
              }
              
              .toc-link:hover {
                text-decoration: underline;
              }
              
              /* Typography */
              h1, h2, h3, h4, h5, h6 {
                margin-top: 24px;
                margin-bottom: 16px;
                font-weight: 600;
                line-height: 1.25;
                padding-bottom: 0.3em;
              }
              
              h1 {
                font-size: 2em;
                margin-top: 0;
                border-bottom: 1px solid var(--color-border-muted);
              }
              
              h2 {
                font-size: 1.5em;
                border-bottom: 1px solid var(--color-border-muted);
              }
              
              h3 {
                font-size: 1.25em;
              }
              
              h4 {
                font-size: 1em;
              }
              
              h5 {
                font-size: 0.875em;
              }
              
              h6 {
                font-size: 0.85em;
                color: var(--color-fg-muted);
              }
              
              a {
                color: var(--color-accent-fg);
                text-decoration: none;
              }
              
              a:hover {
                text-decoration: underline;
              }
              
              .anchor {
                float: left;
                padding-right: 4px;
                margin-left: -20px;
                line-height: 1;
                display: inline-block;
                color: var(--color-fg-muted);
                opacity: 0;
                text-decoration: none;
              }
              
              h1:hover .anchor,
              h2:hover .anchor,
              h3:hover .anchor,
              h4:hover .anchor,
              h5:hover .anchor,
              h6:hover .anchor {
                opacity: 1;
              }
              
              /* Text elements */
              p {
                margin-top: 0;
                margin-bottom: 16px;
              }
              
              blockquote {
                padding: 0 1em;
                color: var(--color-fg-muted);
                border-left: 0.25em solid var(--color-border-default);
                margin: 0 0 16px 0;
              }
              
              ul, ol {
                padding-left: 2em;
                margin-top: 0;
                margin-bottom: 16px;
              }
              
              li {
                margin-top: 0.25em;
              }
              
              li + li {
                margin-top: 0.25em;
              }
              
              /* Code */
              code {
                font-family: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono", monospace;
                padding: 0.2em 0.4em;
                margin: 0;
                font-size: 85%;
                background-color: var(--color-neutral-muted);
                border-radius: 6px;
              }
              
              pre {
                font-family: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono", monospace;
                padding: 16px;
                overflow: auto;
                font-size: 85%;
                line-height: 1.45;
                background-color: var(--color-code-block-bg);
                border-radius: 6px;
                margin-top: 0;
                margin-bottom: 16px;
                word-wrap: normal;
                border: 1px solid var(--color-code-block-border);
              }
              
              pre code {
                font-size: 100%;
                padding: 0;
                margin: 0;
                background-color: transparent;
                border: 0;
                white-space: pre;
                word-break: normal;
              }
              
              /* Tables */
              table {
                display: block;
                width: 100%;
                width: max-content;
                max-width: 100%;
                overflow: auto;
                border-spacing: 0;
                border-collapse: collapse;
                margin-top: 0;
                margin-bottom: 16px;
              }
              
              table th {
                font-weight: 600;
              }
              
              table th,
              table td {
                padding: 6px 13px;
                border: 1px solid var(--color-border-default);
              }
              
              table tr {
                background-color: var(--color-canvas-default);
                border-top: 1px solid var(--color-border-muted);
              }
              
              table tr:nth-child(2n) {
                background-color: var(--color-canvas-subtle);
              }
              
              /* Images */
              img {
                max-width: 100%;
                box-sizing: content-box;
                background-color: var(--color-canvas-default);
                border-radius: 6px;
              }
              
              /* Markdown extras */
              hr {
                height: 0.25em;
                padding: 0;
                margin: 24px 0;
                background-color: var(--color-border-default);
                border: 0;
              }
              
              /* GitHub syntax highlighting */
              .hljs-doctag,
              .hljs-keyword,
              .hljs-meta .hljs-keyword,
              .hljs-template-tag,
              .hljs-template-variable,
              .hljs-type,
              .hljs-variable.language_ {
                color: #d73a49;
              }
              
              .hljs-title,
              .hljs-title.class_,
              .hljs-title.class_.inherited__,
              .hljs-title.function_ {
                color: #6f42c1;
              }
              
              .hljs-attr,
              .hljs-attribute,
              .hljs-literal,
              .hljs-meta,
              .hljs-number,
              .hljs-operator,
              .hljs-selector-attr,
              .hljs-selector-class,
              .hljs-selector-id,
              .hljs-variable {
                color: #005cc5;
              }
              
              .hljs-meta .hljs-string,
              .hljs-regexp,
              .hljs-string {
                color: #032f62;
              }
              
              .hljs-built_in,
              .hljs-symbol {
                color: #e36209;
              }
              
              .hljs-comment,
              .hljs-code,
              .hljs-formula {
                color: #6a737d;
              }
              
              .hljs-name,
              .hljs-quote,
              .hljs-selector-tag,
              .hljs-selector-pseudo {
                color: #22863a;
              }
              
              .hljs-deletion {
                color: #b31d28;
                background-color: #ffeef0;
              }
              
              .hljs-addition {
                color: #22863a;
                background-color: #f0fff4;
              }

              /* For dark mode - if needed, uncomment and adjust
              @media (prefers-color-scheme: dark) {
                :root {
                  --color-canvas-default: #0d1117;
                  --color-canvas-subtle: #161b22;
                  --color-border-default: #30363d;
                  --color-border-muted: #21262d;
                  --color-neutral-muted: rgba(110, 118, 129, 0.4);
                  --color-accent-fg: #58a6ff;
                  --color-accent-emphasis: #1f6feb;
                  --color-danger-fg: #f85149;
                  --color-fg-default: #c9d1d9;
                  --color-fg-muted: #8b949e;
                  --color-fg-subtle: #6e7681;
                  --color-success-fg: #3fb950;
                  --color-attention-fg: #d29922;
                  --color-code-block-bg: #161b22;
                  --color-code-block-border: #30363d;
                }

                .hljs-doctag,
                .hljs-keyword,
                .hljs-meta .hljs-keyword,
                .hljs-template-tag,
                .hljs-template-variable,
                .hljs-type,
                .hljs-variable.language_ {
                  color: #ff7b72;
                }
                
                .hljs-title,
                .hljs-title.class_,
                .hljs-title.class_.inherited__,
                .hljs-title.function_ {
                  color: #d2a8ff;
                }
                
                .hljs-attr,
                .hljs-attribute,
                .hljs-literal,
                .hljs-meta,
                .hljs-number,
                .hljs-operator,
                .hljs-selector-attr,
                .hljs-selector-class,
                .hljs-selector-id,
                .hljs-variable {
                  color: #79c0ff;
                }
                
                .hljs-meta .hljs-string,
                .hljs-regexp,
                .hljs-string {
                  color: #a5d6ff;
                }
                
                .hljs-built_in,
                .hljs-symbol {
                  color: #ffa657;
                }
                
                .hljs-comment,
                .hljs-code,
                .hljs-formula {
                  color: #8b949e;
                }
                
                .hljs-name,
                .hljs-quote,
                .hljs-selector-tag,
                .hljs-selector-pseudo {
                  color: #7ee787;
                }
                
                .hljs-deletion {
                  color: #ffa198;
                  background-color: #490202;
                }
                
                .hljs-addition {
                  color: #aff5b4;
                  background-color: #033a16;
                }
              }
              */
            </style>
          </head>
          <body>
            ${tocContent ? `
            <div class="toc-container">
              <h3 class="toc-header">Table of Contents</h3>
              ${tocContent}
            </div>
            ` : ''}
            
            <div class="markdown-body">
              ${content}
            </div>
          </body>
          </html>
          `;

          // Function to fix image paths in HTML content
          function fixImagePaths(html, mdFilePath, outputPath) {
            // Get the relative directory of the markdown file
            const mdDir = path.dirname(mdFilePath);
            const outputDir = path.dirname(outputPath);
            
            // Fix relative image paths
            // Look for <img src="..."> tags and adjust the paths
            return html.replace(/<img([^>]*)src="([^"]+)"([^>]*)>/g, (match, before, src, after) => {
              // Skip absolute URLs or data URLs
              if (src.startsWith('http://') || src.startsWith('https://') || src.startsWith('data:')) {
                return match;
              }
              
              // Compute the correct relative path
              const absoluteSrc = path.resolve(mdDir, src);
              const relativeToOutput = path.relative(outputDir, absoluteSrc);
              
              return `<img${before}src="${relativeToOutput}"${after}>`;
            });
          }

          async function findMarkdownFiles(directory) {
            const fileList = [];
            
            async function traverse(dir) {
              const files = await fs.readdir(dir, { withFileTypes: true });
              
              for (const file of files) {
                const fullPath = path.join(dir, file.name);
                
                if (file.isDirectory()) {
                  // Skip node_modules and .git directories
                  if (file.name !== 'node_modules' && file.name !== '.git') {
                    await traverse(fullPath);
                  }
                } else if (file.name.endsWith('.md')) {
                  fileList.push(fullPath);
                }
              }
            }
            
            await traverse(directory);
            return fileList;
          }

          async function convertMarkdownToHtml(mdFilePath, outputDir) {
            try {
              // Read markdown content
              const mdContent = await fs.readFile(mdFilePath, 'utf8');
              
              // Get title from first heading or filename
              let title = path.basename(mdFilePath, '.md');
              const headingMatch = mdContent.match(/^#\s+(.+)$/m);
              if (headingMatch) {
                title = headingMatch[1];
              }
              
              // Generate TOC
              let tocContent = '';
              const contentWithTocPlaceholder = mdContent.includes('[TOC]') 
                ? mdContent 
                : '[TOC]\n\n' + mdContent;
              
              // Convert markdown to HTML
              const htmlContent = md.render(contentWithTocPlaceholder);
              
              // Extract TOC
              const tocMatch = htmlContent.match(/<nav class="table-of-contents">([\s\S]*?)<\/nav>/);
              if (tocMatch) {
                tocContent = tocMatch[1];
              }
              
              // Remove the TOC placeholder from the content
              let processedContent = htmlContent.replace(/<nav class="table-of-contents">[\s\S]*?<\/nav>/, '');
              
              // Determine file paths
              const relativePath = path.relative('.', mdFilePath);
              const outputPath = path.join(outputDir, relativePath.replace(/\.md$/, '.html'));
              
              // Create directory structure if it doesn't exist
              await fs.mkdir(path.dirname(outputPath), { recursive: true });
              
              // Fix image paths
              processedContent = fixImagePaths(processedContent, mdFilePath, outputPath);
              
              // Write HTML file
              await fs.writeFile(outputPath, htmlTemplate(processedContent, title, tocContent));
              
              console.log(`Converted ${mdFilePath} to ${outputPath}`);
            } catch (error) {
              console.error(`Error converting ${mdFilePath}:`, error);
              process.exit(1);
            }
          }

          async function main() {
            try {
              const outputDir = 'html_output';
              
              // Create output directory
              await fs.mkdir(outputDir, { recursive: true });
              
              // Find all markdown files
              const mdFiles = await findMarkdownFiles('.');
              
              // Convert each markdown file to HTML
              for (const mdFile of mdFiles) {
                await convertMarkdownToHtml(mdFile, outputDir);
              }
              
              console.log('Conversion completed successfully!');
            } catch (error) {
              console.error('Error during conversion:', error);
              process.exit(1);
            }
          }

          main();
          EOF

      - name: Run conversion script
        run: node convert.js

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Checkout docs branch
        run: |
          if git ls-remote --heads origin docs; then
            git fetch origin docs
            git checkout docs
          else
            git checkout --orphan docs
            git rm -rf .
            git commit --allow-empty -m "Initial commit for docs branch"
          fi

      - name: Copy HTML files and images to docs branch
        run: |
          # Create directories and copy HTML files
          mkdir -p temp_copy
          cp -r html_output/* temp_copy/

          # Copy images to temp directory
          find . -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.svg" -o -iname "*.webp" \) -not -path "./node_modules/*" -not -path "./.git/*" -exec cp --parents {} temp_copy/ \;

          # Clean existing files but keep .git directory
          find . -not -path "./.git*" -not -path "./temp_copy*" -delete

          # Move the files back
          cp -r temp_copy/* .
          rm -rf temp_copy

      - name: Commit and push to docs branch
        run: |
          git add .

          if git status | grep -q "nothing to commit"; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Convert Markdown to HTML from branch ${GITHUB_REF#refs/heads/}"

          # Use GitHub token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
          git push origin docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
